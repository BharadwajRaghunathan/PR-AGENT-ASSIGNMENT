name: 🤖 PR Review Agent

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - '**.py'  # Only run on Python files

jobs:
  pr-review:
    name: 🔍 Automated Code Review
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint flake8 requests python-dotenv PyGithub python-gitlab
    
    - name: 📥 Download PR Review Agent
      run: |
        # In a real deployment, you'd clone your agent repository
        # For demo, we'll create the essential files
        echo "Creating PR Review Agent files..."
        
        # Create a simple analysis script
        cat > analyze_pr.py << 'EOF'
        import os
        import sys
        import subprocess
        import json
        from pathlib import Path
        
        def analyze_file(filepath):
            """Analyze a single Python file."""
            issues = []
            
            # Run pylint
            try:
                result = subprocess.run(
                    ['pylint', filepath, '--output-format=json'],
                    capture_output=True, text=True, timeout=30
                )
                if result.stdout:
                    pylint_issues = json.loads(result.stdout)
                    issues.extend([f"Pylint: {issue['message']}" for issue in pylint_issues])
            except Exception as e:
                issues.append(f"Pylint analysis failed: {e}")
            
            # Run flake8
            try:
                result = subprocess.run(
                    ['flake8', filepath], 
                    capture_output=True, text=True, timeout=30
                )
                if result.stdout:
                    flake8_issues = result.stdout.strip().split('\n')
                    issues.extend([f"Flake8: {issue}" for issue in flake8_issues if issue])
            except Exception as e:
                issues.append(f"Flake8 analysis failed: {e}")
            
            return issues
        
        def main():
            # Get changed Python files from git diff
            try:
                result = subprocess.run(
                    ['git', 'diff', '--name-only', 'origin/main', 'HEAD'],
                    capture_output=True, text=True
                )
                changed_files = [f for f in result.stdout.strip().split('\n') 
                               if f.endswith('.py') and Path(f).exists()]
            except:
                # Fallback: analyze all Python files
                changed_files = [str(p) for p in Path('.').rglob('*.py')]
            
            if not changed_files:
                print("No Python files to analyze.")
                return
            
            all_issues = {}
            total_issues = 0
            
            for filepath in changed_files:
                print(f"Analyzing {filepath}...")
                issues = analyze_file(filepath)
                all_issues[filepath] = issues
                total_issues += len(issues)
            
            # Generate report
            if total_issues > 0:
                print(f"\n🔍 PR REVIEW REPORT")
                print(f"📊 Total Issues Found: {total_issues}")
                print(f"📁 Files Analyzed: {len(changed_files)}")
                print("="*50)
                
                for filepath, issues in all_issues.items():
                    if issues:
                        print(f"\n📄 {filepath} ({len(issues)} issues):")
                        for issue in issues[:5]:  # Show first 5 issues
                            print(f"  • {issue}")
                        if len(issues) > 5:
                            print(f"  ... and {len(issues) - 5} more issues")
                
                # Set job summary
                with open(os.environ['GITHUB_STEP_SUMMARY'], 'w') as f:
                    f.write(f"## 🤖 PR Review Results\n\n")
                    f.write(f"**Total Issues:** {total_issues}  \n")
                    f.write(f"**Files Analyzed:** {len(changed_files)}  \n\n")
                    
                    for filepath, issues in all_issues.items():
                        if issues:
                            f.write(f"### 📄 `{filepath}`\n")
                            f.write(f"**Issues:** {len(issues)}\n\n")
                            for issue in issues[:3]:
                                f.write(f"- {issue}\n")
                            if len(issues) > 3:
                                f.write(f"- ... and {len(issues) - 3} more\n")
                            f.write("\n")
                
                # Exit with error if critical issues found
                if total_issues > 10:
                    print(f"❌ Too many issues found ({total_issues}). Please fix before merging.")
                    sys.exit(1)
                elif total_issues > 0:
                    print(f"⚠️  Some issues found. Consider fixing before merging.")
                    
            else:
                print("✅ No issues found! Code looks good.")
        
        if __name__ == "__main__":
            main()
        EOF
    
    - name: 🔍 Run PR Review Analysis
      run: |
        python analyze_pr.py
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 💬 Comment on PR (if issues found)
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          // Create a detailed comment
          const comment = `## 🤖 Automated PR Review Results
          
          ⚠️ **Issues were found in this PR that should be addressed before merging.**
          
          Please check the [Actions tab](${context.payload.repository.html_url}/actions/runs/${context.runId}) for detailed analysis results.
          
          ### 📋 Quick Summary:
          - Multiple code quality issues detected
          - Consider running \`pylint\` and \`flake8\` locally
          - Fix issues and push updates to re-trigger analysis
          
          ### 🛠️ Recommended Actions:
          1. Run \`pip install pylint flake8\`
          2. Fix reported issues
          3. Push your changes
          4. This check will re-run automatically
          
          ---
          *This review was automatically generated by PR Review Agent* 🚀`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
